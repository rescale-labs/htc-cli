// Code generated by ogen, DO NOT EDIT.

package _oas

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/jwks.json"
				origElem := elem
				if l := len(".well-known/jwks.json"); len(elem) >= l && elem[0:l] == ".well-known/jwks.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleWellKnownJwksJSONGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 't': // Prefix: "token"
					origElem := elem
					if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAuthTokenGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/whoami"
						origElem := elem
						if l := len("/whoami"); len(elem) >= l && elem[0:l] == "/whoami" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAuthTokenWhoamiGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'w': // Prefix: "whoami"
					origElem := elem
					if l := len("whoami"); len(elem) >= l && elem[0:l] == "whoami" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAuthWhoamiGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "htc/"
				origElem := elem
				if l := len("htc/"); len(elem) >= l && elem[0:l] == "htc/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "gcp/clusters/"
					origElem := elem
					if l := len("gcp/clusters/"); len(elem) >= l && elem[0:l] == "gcp/clusters/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHtcGcpClustersWorkspaceIdGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'm': // Prefix: "metrics"
					origElem := elem
					if l := len("metrics"); len(elem) >= l && elem[0:l] == "metrics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHtcMetricsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'p': // Prefix: "projects"
					origElem := elem
					if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleHtcProjectsGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleHtcProjectsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "projectId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleHtcProjectsProjectIdGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleHtcProjectsProjectIdPatchRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "container-registry/"
								origElem := elem
								if l := len("container-registry/"); len(elem) >= l && elem[0:l] == "container-registry/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "images"
									origElem := elem
									if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleHtcProjectsProjectIdContainerRegistryImagesGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "imageName"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleHtcProjectsProjectIdContainerRegistryImagesImageNameGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								case 'r': // Prefix: "repo/"
									origElem := elem
									if l := len("repo/"); len(elem) >= l && elem[0:l] == "repo/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "repoName"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleHtcProjectsProjectIdContainerRegistryRepoRepoNamePostRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "token"
									origElem := elem
									if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleHtcProjectsProjectIdContainerRegistryTokenGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'd': // Prefix: "dimensions"
								origElem := elem
								if l := len("dimensions"); len(elem) >= l && elem[0:l] == "dimensions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleHtcProjectsProjectIdDimensionsGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleHtcProjectsProjectIdDimensionsPutRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}

								elem = origElem
							case 'l': // Prefix: "limits"
								origElem := elem
								if l := len("limits"); len(elem) >= l && elem[0:l] == "limits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleHtcProjectsProjectIdLimitsDeleteRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleHtcProjectsProjectIdLimitsGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleHtcProjectsProjectIdLimitsPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleHtcProjectsProjectIdLimitsIDDeleteRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleHtcProjectsProjectIdLimitsIDGetRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleHtcProjectsProjectIdLimitsIDPatchRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "storage/"
								origElem := elem
								if l := len("storage/"); len(elem) >= l && elem[0:l] == "storage/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "presigned-url"
									origElem := elem
									if l := len("presigned-url"); len(elem) >= l && elem[0:l] == "presigned-url" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleHtcProjectsProjectIdStoragePresignedURLGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "token"
									origElem := elem
									if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleHtcProjectsProjectIdStorageTokenGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "region"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleHtcProjectsProjectIdStorageTokenRegionGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleHtcProjectsProjectIdStorageTokensGetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "task"
								origElem := elem
								if l := len("task"); len(elem) >= l && elem[0:l] == "task" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '-': // Prefix: "-retention-policy"
									origElem := elem
									if l := len("-retention-policy"); len(elem) >= l && elem[0:l] == "-retention-policy" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleHtcProjectsProjectIdTaskRetentionPolicyDeleteRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleHtcProjectsProjectIdTaskRetentionPolicyGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleHtcProjectsProjectIdTaskRetentionPolicyPutRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleHtcProjectsProjectIdTasksGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "POST":
											s.handleHtcProjectsProjectIdTasksPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "taskId"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[1] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "DELETE":
												s.handleHtcProjectsProjectIdTasksTaskIdDeleteRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "GET":
												s.handleHtcProjectsProjectIdTasksTaskIdGetRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "PATCH":
												s.handleHtcProjectsProjectIdTasksTaskIdPatchRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET,PATCH")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'g': // Prefix: "group"
												origElem := elem
												if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '-': // Prefix: "-summary-statistics"
													origElem := elem
													if l := len("-summary-statistics"); len(elem) >= l && elem[0:l] == "-summary-statistics" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleHtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}

													elem = origElem
												case 's': // Prefix: "s"
													origElem := elem
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleHtcProjectsProjectIdTasksTaskIdGroupsGetRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}

													elem = origElem
												}

												elem = origElem
											case 'j': // Prefix: "jobs"
												origElem := elem
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleHtcProjectsProjectIdTasksTaskIdJobsGetRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													origElem := elem
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'b': // Prefix: "batch"
														origElem := elem
														if l := len("batch"); len(elem) >= l && elem[0:l] == "batch" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleHtcProjectsProjectIdTasksTaskIdJobsBatchPostRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

														elem = origElem
													case 'c': // Prefix: "cancel"
														origElem := elem
														if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleHtcProjectsProjectIdTasksTaskIdJobsCancelPostRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

														elem = origElem
													}
													// Param: "jobId"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[2] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleHtcProjectsProjectIdTasksTaskIdJobsJobIdGetRequest([3]string{
																args[0],
																args[1],
																args[2],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														origElem := elem
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'e': // Prefix: "events"
															origElem := elem
															if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleHtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetRequest([3]string{
																		args[0],
																		args[1],
																		args[2],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}

															elem = origElem
														case 'l': // Prefix: "logs"
															origElem := elem
															if l := len("logs"); len(elem) >= l && elem[0:l] == "logs" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleHtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetRequest([3]string{
																		args[0],
																		args[1],
																		args[2],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}

															elem = origElem
														}

														elem = origElem
													}

													elem = origElem
												}

												elem = origElem
											case 's': // Prefix: "s"
												origElem := elem
												if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 't': // Prefix: "torage/"
													origElem := elem
													if l := len("torage/"); len(elem) >= l && elem[0:l] == "torage/" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'p': // Prefix: "presigned-url"
														origElem := elem
														if l := len("presigned-url"); len(elem) >= l && elem[0:l] == "presigned-url" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleHtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}

														elem = origElem
													case 'r': // Prefix: "regional-storage"
														origElem := elem
														if l := len("regional-storage"); len(elem) >= l && elem[0:l] == "regional-storage" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleHtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}

														elem = origElem
													case 't': // Prefix: "token"
														origElem := elem
														if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleHtcProjectsProjectIdTasksTaskIdStorageTokenGetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															origElem := elem
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "region"
															// Leaf parameter
															args[2] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleHtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetRequest([3]string{
																		args[0],
																		args[1],
																		args[2],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}

															elem = origElem
														case 's': // Prefix: "s"
															origElem := elem
															if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleHtcProjectsProjectIdTasksTaskIdStorageTokensGetRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}

															elem = origElem
														}

														elem = origElem
													}

													elem = origElem
												case 'u': // Prefix: "ummary-statistics"
													origElem := elem
													if l := len("ummary-statistics"); len(elem) >= l && elem[0:l] == "ummary-statistics" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleHtcProjectsProjectIdTasksTaskIdSummaryStatisticsGetRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}

													elem = origElem
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "regions"
					origElem := elem
					if l := len("regions"); len(elem) >= l && elem[0:l] == "regions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleHtcRegionsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "region"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleHtcRegionsRegionGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "storage"
					origElem := elem
					if l := len("storage"); len(elem) >= l && elem[0:l] == "storage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleHtcStorageGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/region/"
						origElem := elem
						if l := len("/region/"); len(elem) >= l && elem[0:l] == "/region/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "region"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleHtcStorageRegionRegionGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'w': // Prefix: "workspaces/"
					origElem := elem
					if l := len("workspaces/"); len(elem) >= l && elem[0:l] == "workspaces/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dimensions"
							origElem := elem
							if l := len("dimensions"); len(elem) >= l && elem[0:l] == "dimensions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleHtcWorkspacesWorkspaceIdDimensionsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'l': // Prefix: "limits"
							origElem := elem
							if l := len("limits"); len(elem) >= l && elem[0:l] == "limits" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleHtcWorkspacesWorkspaceIdLimitsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 't': // Prefix: "task-retention-policy"
							origElem := elem
							if l := len("task-retention-policy"); len(elem) >= l && elem[0:l] == "task-retention-policy" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleHtcWorkspacesWorkspaceIdTaskRetentionPolicyGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleHtcWorkspacesWorkspaceIdTaskRetentionPolicyPutRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'o': // Prefix: "oauth2/token"
				origElem := elem
				if l := len("oauth2/token"); len(elem) >= l && elem[0:l] == "oauth2/token" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleOAuth2TokenPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/jwks.json"
				origElem := elem
				if l := len(".well-known/jwks.json"); len(elem) >= l && elem[0:l] == ".well-known/jwks.json" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "WellKnownJwksJSONGet"
						r.summary = "Get JWKS"
						r.operationID = ""
						r.pathPattern = "/.well-known/jwks.json"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 't': // Prefix: "token"
					origElem := elem
					if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "AuthTokenGet"
							r.summary = "Get JWT Token"
							r.operationID = ""
							r.pathPattern = "/auth/token"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/whoami"
						origElem := elem
						if l := len("/whoami"); len(elem) >= l && elem[0:l] == "/whoami" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "AuthTokenWhoamiGet"
								r.summary = "Get JWT Token Payload"
								r.operationID = ""
								r.pathPattern = "/auth/token/whoami"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'w': // Prefix: "whoami"
					origElem := elem
					if l := len("whoami"); len(elem) >= l && elem[0:l] == "whoami" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "AuthWhoamiGet"
							r.summary = "Get Rescale User"
							r.operationID = ""
							r.pathPattern = "/auth/whoami"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "htc/"
				origElem := elem
				if l := len("htc/"); len(elem) >= l && elem[0:l] == "htc/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "gcp/clusters/"
					origElem := elem
					if l := len("gcp/clusters/"); len(elem) >= l && elem[0:l] == "gcp/clusters/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "HtcGcpClustersWorkspaceIdGet"
							r.summary = "Get Status of GCP Cluster"
							r.operationID = ""
							r.pathPattern = "/htc/gcp/clusters/{workspaceId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'm': // Prefix: "metrics"
					origElem := elem
					if l := len("metrics"); len(elem) >= l && elem[0:l] == "metrics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "HtcMetricsGet"
							r.summary = "Get Metrics"
							r.operationID = ""
							r.pathPattern = "/htc/metrics"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'p': // Prefix: "projects"
					origElem := elem
					if l := len("projects"); len(elem) >= l && elem[0:l] == "projects" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "HtcProjectsGet"
							r.summary = "Get All Projects"
							r.operationID = ""
							r.pathPattern = "/htc/projects"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "HtcProjectsPost"
							r.summary = "Create Project"
							r.operationID = ""
							r.pathPattern = "/htc/projects"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "projectId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "HtcProjectsProjectIdGet"
								r.summary = "Get Project"
								r.operationID = ""
								r.pathPattern = "/htc/projects/{projectId}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "HtcProjectsProjectIdPatch"
								r.summary = "Update Project Regions"
								r.operationID = ""
								r.pathPattern = "/htc/projects/{projectId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "container-registry/"
								origElem := elem
								if l := len("container-registry/"); len(elem) >= l && elem[0:l] == "container-registry/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "images"
									origElem := elem
									if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "HtcProjectsProjectIdContainerRegistryImagesGet"
											r.summary = "Get All Images"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/container-registry/images"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "imageName"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "HtcProjectsProjectIdContainerRegistryImagesImageNameGet"
												r.summary = "Get Image"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/container-registry/images/{imageName}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								case 'r': // Prefix: "repo/"
									origElem := elem
									if l := len("repo/"); len(elem) >= l && elem[0:l] == "repo/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "repoName"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "HtcProjectsProjectIdContainerRegistryRepoRepoNamePost"
											r.summary = "Create a Private Repo"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/container-registry/repo/{repoName}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "token"
									origElem := elem
									if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "HtcProjectsProjectIdContainerRegistryTokenGet"
											r.summary = "Get Container Registry Token"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/container-registry/token"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'd': // Prefix: "dimensions"
								origElem := elem
								if l := len("dimensions"); len(elem) >= l && elem[0:l] == "dimensions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "HtcProjectsProjectIdDimensionsGet"
										r.summary = "Get Project Dimensions"
										r.operationID = ""
										r.pathPattern = "/htc/projects/{projectId}/dimensions"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "HtcProjectsProjectIdDimensionsPut"
										r.summary = "Modify Project Dimensions"
										r.operationID = ""
										r.pathPattern = "/htc/projects/{projectId}/dimensions"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'l': // Prefix: "limits"
								origElem := elem
								if l := len("limits"); len(elem) >= l && elem[0:l] == "limits" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = "HtcProjectsProjectIdLimitsDelete"
										r.summary = "Delete Project Limits"
										r.operationID = ""
										r.pathPattern = "/htc/projects/{projectId}/limits"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = "HtcProjectsProjectIdLimitsGet"
										r.summary = "Get Project Limits"
										r.operationID = ""
										r.pathPattern = "/htc/projects/{projectId}/limits"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "HtcProjectsProjectIdLimitsPost"
										r.summary = "Create a Project Limit"
										r.operationID = ""
										r.pathPattern = "/htc/projects/{projectId}/limits"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "HtcProjectsProjectIdLimitsIDDelete"
											r.summary = "Delete a Project Limit"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/limits/{id}"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = "HtcProjectsProjectIdLimitsIDGet"
											r.summary = "Get Project Limit"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/limits/{id}"
											r.args = args
											r.count = 2
											return r, true
										case "PATCH":
											r.name = "HtcProjectsProjectIdLimitsIDPatch"
											r.summary = "Update Project Limit"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/limits/{id}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "storage/"
								origElem := elem
								if l := len("storage/"); len(elem) >= l && elem[0:l] == "storage/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "presigned-url"
									origElem := elem
									if l := len("presigned-url"); len(elem) >= l && elem[0:l] == "presigned-url" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "HtcProjectsProjectIdStoragePresignedURLGet"
											r.summary = "Get Project Storage Presigned URL"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/storage/presigned-url"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "token"
									origElem := elem
									if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "HtcProjectsProjectIdStorageTokenGet"
											r.summary = "Get Project Storage Token"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/storage/token"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "region"
										// Leaf parameter
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "HtcProjectsProjectIdStorageTokenRegionGet"
												r.summary = "Get Project Storage Token for a Region"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/storage/token/{region}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 's': // Prefix: "s"
										origElem := elem
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = "HtcProjectsProjectIdStorageTokensGet"
												r.summary = "Get All Project Storage Tokens"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/storage/tokens"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 't': // Prefix: "task"
								origElem := elem
								if l := len("task"); len(elem) >= l && elem[0:l] == "task" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '-': // Prefix: "-retention-policy"
									origElem := elem
									if l := len("-retention-policy"); len(elem) >= l && elem[0:l] == "-retention-policy" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "HtcProjectsProjectIdTaskRetentionPolicyDelete"
											r.summary = "Delete Project Task Retention Policy"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/task-retention-policy"
											r.args = args
											r.count = 1
											return r, true
										case "GET":
											r.name = "HtcProjectsProjectIdTaskRetentionPolicyGet"
											r.summary = "Get Project Task Retention Policy"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/task-retention-policy"
											r.args = args
											r.count = 1
											return r, true
										case "PUT":
											r.name = "HtcProjectsProjectIdTaskRetentionPolicyPut"
											r.summary = "Modify Project Task Retention Policy"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/task-retention-policy"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "HtcProjectsProjectIdTasksGet"
											r.summary = "Get All Tasks for a Project"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/tasks"
											r.args = args
											r.count = 1
											return r, true
										case "POST":
											r.name = "HtcProjectsProjectIdTasksPost"
											r.summary = "Create a Task"
											r.operationID = ""
											r.pathPattern = "/htc/projects/{projectId}/tasks"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										origElem := elem
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "taskId"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[1] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "DELETE":
												r.name = "HtcProjectsProjectIdTasksTaskIdDelete"
												r.summary = "Delete Task"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}"
												r.args = args
												r.count = 2
												return r, true
											case "GET":
												r.name = "HtcProjectsProjectIdTasksTaskIdGet"
												r.summary = "Get Task"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}"
												r.args = args
												r.count = 2
												return r, true
											case "PATCH":
												r.name = "HtcProjectsProjectIdTasksTaskIdPatch"
												r.summary = "Archive or Unarchive a Task"
												r.operationID = ""
												r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											origElem := elem
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'g': // Prefix: "group"
												origElem := elem
												if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '-': // Prefix: "-summary-statistics"
													origElem := elem
													if l := len("-summary-statistics"); len(elem) >= l && elem[0:l] == "-summary-statistics" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "GET":
															r.name = "HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGet"
															r.summary = "Get Task Group Summary Statistics"
															r.operationID = ""
															r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/group-summary-statistics"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}

													elem = origElem
												case 's': // Prefix: "s"
													origElem := elem
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "GET":
															r.name = "HtcProjectsProjectIdTasksTaskIdGroupsGet"
															r.summary = "Get Task Groups"
															r.operationID = ""
															r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/groups"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}

													elem = origElem
												}

												elem = origElem
											case 'j': // Prefix: "jobs"
												origElem := elem
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "HtcProjectsProjectIdTasksTaskIdJobsGet"
														r.summary = "Get All Jobs For a Task"
														r.operationID = ""
														r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													origElem := elem
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'b': // Prefix: "batch"
														origElem := elem
														if l := len("batch"); len(elem) >= l && elem[0:l] == "batch" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = "HtcProjectsProjectIdTasksTaskIdJobsBatchPost"
																r.summary = "Submit Jobs"
																r.operationID = ""
																r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs/batch"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}

														elem = origElem
													case 'c': // Prefix: "cancel"
														origElem := elem
														if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = "HtcProjectsProjectIdTasksTaskIdJobsCancelPost"
																r.summary = "Cancel Jobs"
																r.operationID = ""
																r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs/cancel"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}

														elem = origElem
													}
													// Param: "jobId"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[2] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "HtcProjectsProjectIdTasksTaskIdJobsJobIdGet"
															r.summary = "Get Job"
															r.operationID = ""
															r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs/{jobId}"
															r.args = args
															r.count = 3
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														origElem := elem
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'e': // Prefix: "events"
															origElem := elem
															if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "GET":
																	r.name = "HtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGet"
																	r.summary = "Get Job Events"
																	r.operationID = ""
																	r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs/{jobId}/events"
																	r.args = args
																	r.count = 3
																	return r, true
																default:
																	return
																}
															}

															elem = origElem
														case 'l': // Prefix: "logs"
															origElem := elem
															if l := len("logs"); len(elem) >= l && elem[0:l] == "logs" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "GET":
																	r.name = "HtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGet"
																	r.summary = "Get Job Logs"
																	r.operationID = ""
																	r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/jobs/{jobId}/logs"
																	r.args = args
																	r.count = 3
																	return r, true
																default:
																	return
																}
															}

															elem = origElem
														}

														elem = origElem
													}

													elem = origElem
												}

												elem = origElem
											case 's': // Prefix: "s"
												origElem := elem
												if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 't': // Prefix: "torage/"
													origElem := elem
													if l := len("torage/"); len(elem) >= l && elem[0:l] == "torage/" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'p': // Prefix: "presigned-url"
														origElem := elem
														if l := len("presigned-url"); len(elem) >= l && elem[0:l] == "presigned-url" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "GET":
																r.name = "HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGet"
																r.summary = "Get Task Storage Presigned URL"
																r.operationID = ""
																r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/storage/presigned-url"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}

														elem = origElem
													case 'r': // Prefix: "regional-storage"
														origElem := elem
														if l := len("regional-storage"); len(elem) >= l && elem[0:l] == "regional-storage" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "GET":
																r.name = "HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGet"
																r.summary = "Get All Task Storage Tokens"
																r.operationID = ""
																r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/storage/regional-storage"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}

														elem = origElem
													case 't': // Prefix: "token"
														origElem := elem
														if l := len("token"); len(elem) >= l && elem[0:l] == "token" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "HtcProjectsProjectIdTasksTaskIdStorageTokenGet"
																r.summary = "Get Task Storage Token"
																r.operationID = ""
																r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/storage/token"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															origElem := elem
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "region"
															// Leaf parameter
															args[2] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "GET":
																	r.name = "HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGet"
																	r.summary = "Get Task Storage Token for a Region"
																	r.operationID = ""
																	r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/storage/token/{region}"
																	r.args = args
																	r.count = 3
																	return r, true
																default:
																	return
																}
															}

															elem = origElem
														case 's': // Prefix: "s"
															origElem := elem
															if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "GET":
																	r.name = "HtcProjectsProjectIdTasksTaskIdStorageTokensGet"
																	r.summary = "Get All Task Storage Tokens"
																	r.operationID = ""
																	r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/storage/tokens"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}

															elem = origElem
														}

														elem = origElem
													}

													elem = origElem
												case 'u': // Prefix: "ummary-statistics"
													origElem := elem
													if l := len("ummary-statistics"); len(elem) >= l && elem[0:l] == "ummary-statistics" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "GET":
															r.name = "HtcProjectsProjectIdTasksTaskIdSummaryStatisticsGet"
															r.summary = "Get Task Summary Statistics"
															r.operationID = ""
															r.pathPattern = "/htc/projects/{projectId}/tasks/{taskId}/summary-statistics"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}

													elem = origElem
												}

												elem = origElem
											}

											elem = origElem
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "regions"
					origElem := elem
					if l := len("regions"); len(elem) >= l && elem[0:l] == "regions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "HtcRegionsGet"
							r.summary = "Get Region Settings For All Regions"
							r.operationID = ""
							r.pathPattern = "/htc/regions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "region"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "HtcRegionsRegionGet"
								r.summary = "Get Region Settings for a Region"
								r.operationID = ""
								r.pathPattern = "/htc/regions/{region}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "storage"
					origElem := elem
					if l := len("storage"); len(elem) >= l && elem[0:l] == "storage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "HtcStorageGet"
							r.summary = "Get Regional Storages"
							r.operationID = ""
							r.pathPattern = "/htc/storage"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/region/"
						origElem := elem
						if l := len("/region/"); len(elem) >= l && elem[0:l] == "/region/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "region"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "HtcStorageRegionRegionGet"
								r.summary = "Get Regional Storage"
								r.operationID = ""
								r.pathPattern = "/htc/storage/region/{region}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'w': // Prefix: "workspaces/"
					origElem := elem
					if l := len("workspaces/"); len(elem) >= l && elem[0:l] == "workspaces/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dimensions"
							origElem := elem
							if l := len("dimensions"); len(elem) >= l && elem[0:l] == "dimensions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "HtcWorkspacesWorkspaceIdDimensionsGet"
									r.summary = "Get Workspace Dimensions"
									r.operationID = ""
									r.pathPattern = "/htc/workspaces/{workspaceId}/dimensions"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'l': // Prefix: "limits"
							origElem := elem
							if l := len("limits"); len(elem) >= l && elem[0:l] == "limits" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "HtcWorkspacesWorkspaceIdLimitsGet"
									r.summary = "Get Workspace Limit"
									r.operationID = ""
									r.pathPattern = "/htc/workspaces/{workspaceId}/limits"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 't': // Prefix: "task-retention-policy"
							origElem := elem
							if l := len("task-retention-policy"); len(elem) >= l && elem[0:l] == "task-retention-policy" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "HtcWorkspacesWorkspaceIdTaskRetentionPolicyGet"
									r.summary = "Get Workspace Task Retention Policy"
									r.operationID = ""
									r.pathPattern = "/htc/workspaces/{workspaceId}/task-retention-policy"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "HtcWorkspacesWorkspaceIdTaskRetentionPolicyPut"
									r.summary = "Modify Workspace Task Retention Policy"
									r.operationID = ""
									r.pathPattern = "/htc/workspaces/{workspaceId}/task-retention-policy"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'o': // Prefix: "oauth2/token"
				origElem := elem
				if l := len("oauth2/token"); len(elem) >= l && elem[0:l] == "oauth2/token" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "OAuth2TokenPost"
						r.summary = "Get OAuth Access Token"
						r.operationID = ""
						r.pathPattern = "/oauth2/token"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
