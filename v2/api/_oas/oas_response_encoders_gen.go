// Code generated by ogen, DO NOT EDIT.

package _oas

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func encodeAuthTokenGetResponse(response AuthTokenGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeAuthTokenWhoamiGetResponse(response AuthTokenWhoamiGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCTokenPayload:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *AuthTokenWhoamiGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeAuthWhoamiGetResponse(response AuthWhoamiGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WhoAmI:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcGcpClustersWorkspaceIdGetResponse(response HtcGcpClustersWorkspaceIdGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCClusterStatusResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcGcpClustersWorkspaceIdGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcGcpClustersWorkspaceIdGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcMetricsGetResponse(response HtcMetricsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcMetricsGetOK:
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcMetricsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcMetricsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsGetResponse(response HtcProjectsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProjectsResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsPostResponse(response HtcProjectsPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsPostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsPostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdContainerRegistryImagesGetResponse(response HtcProjectsProjectIdContainerRegistryImagesGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCImages:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdContainerRegistryImagesGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdContainerRegistryImagesGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdContainerRegistryImagesImageNameGetResponse(response HtcProjectsProjectIdContainerRegistryImagesImageNameGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCImageStatus:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdContainerRegistryImagesImageNameGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdContainerRegistryImagesImageNameGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdContainerRegistryRepoRepoNamePostResponse(response HtcProjectsProjectIdContainerRegistryRepoRepoNamePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCRepository:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdContainerRegistryRepoRepoNamePostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdContainerRegistryRepoRepoNamePostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdContainerRegistryTokenGetResponse(response HtcProjectsProjectIdContainerRegistryTokenGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdContainerRegistryTokenGetOKHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
		}
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		writer := w
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdContainerRegistryTokenGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdContainerRegistryTokenGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdDimensionsGetResponse(response HtcProjectsProjectIdDimensionsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdDimensionsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdDimensionsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdDimensionsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdDimensionsPutResponse(response HtcProjectsProjectIdDimensionsPutRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdDimensionsPutCreatedApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdDimensionsPutUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdDimensionsPutForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdGetResponse(response HtcProjectsProjectIdGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsDeleteResponse(response HtcProjectsProjectIdLimitsDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdLimitsDeleteNoContent:
		w.WriteHeader(204)
		span.SetStatus(codes.Ok, http.StatusText(204))

		return nil

	case *HtcProjectsProjectIdLimitsDeleteUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsDeleteForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsGetResponse(response HtcProjectsProjectIdLimitsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProjectLimits:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDDeleteResponse(response HtcProjectsProjectIdLimitsIDDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdLimitsIDDeleteNoContent:
		w.WriteHeader(204)
		span.SetStatus(codes.Ok, http.StatusText(204))

		return nil

	case *HtcProjectsProjectIdLimitsIDDeleteUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsIDDeleteForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDGetResponse(response HtcProjectsProjectIdLimitsIDGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsIDGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsIDGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDPatchResponse(response HtcProjectsProjectIdLimitsIDPatchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsIDPatchUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsIDPatchForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsPostResponse(response HtcProjectsProjectIdLimitsPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsPostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdLimitsPostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdPatchResponse(response HtcProjectsProjectIdPatchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdPatchUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdPatchForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStoragePresignedURLGetResponse(response HtcProjectsProjectIdStoragePresignedURLGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PresignedPutUrlResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStoragePresignedURLGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdStoragePresignedURLGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokenGetResponse(response HtcProjectsProjectIdStorageTokenGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokenGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdStorageTokenGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokenRegionGetResponse(response HtcProjectsProjectIdStorageTokenRegionGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokenRegionGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdStorageTokenRegionGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokensGetResponse(response HtcProjectsProjectIdStorageTokensGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessTokens:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokensGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdStorageTokensGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyDeleteResponse(response HtcProjectsProjectIdTaskRetentionPolicyDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteNoContent:
		w.WriteHeader(204)
		span.SetStatus(codes.Ok, http.StatusText(204))

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyGetResponse(response HtcProjectsProjectIdTaskRetentionPolicyGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyPutResponse(response HtcProjectsProjectIdTaskRetentionPolicyPutRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyPutUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyPutForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksGetResponse(response HtcProjectsProjectIdTasksGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCTasksResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksPostResponse(response HtcProjectsProjectIdTasksPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksPostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksPostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdDeleteResponse(response HtcProjectsProjectIdTasksTaskIdDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdDeleteOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdDeleteUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdDeleteForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGetResponse(response HtcProjectsProjectIdTasksTaskIdGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetResponse(response HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGroupsGetResponse(response HtcProjectsProjectIdTasksTaskIdGroupsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdGroupsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsBatchPostResponse(response HtcProjectsProjectIdTasksTaskIdJobsBatchPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdJobsBatchPostOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsBatchPostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsBatchPostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsCancelPostResponse(response HtcProjectsProjectIdTasksTaskIdJobsCancelPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdJobsCancelPostOK:
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsCancelPostUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsCancelPostForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsGetResponse(response HtcProjectsProjectIdTasksTaskIdJobsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdJobsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetResponse(response HtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdEventsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsJobIdGetResponse(response HtcProjectsProjectIdTasksTaskIdJobsJobIdGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCJob:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetResponse(response HtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdJobsJobIdLogsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdPatchResponse(response HtcProjectsProjectIdTasksTaskIdPatchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdPatchUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdPatchForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetResponse(response HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PresignedPutUrlResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RegionalStorageResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokenGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokenGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokensGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokensGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StorageAccessTokens:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokensGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokensGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdSummaryStatisticsGetResponse(response HtcProjectsProjectIdTasksTaskIdSummaryStatisticsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *JobStatusSummary:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdSummaryStatisticsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcProjectsProjectIdTasksTaskIdSummaryStatisticsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcRegionsGetResponse(response HtcRegionsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCInfraResource:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcRegionsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcRegionsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcRegionsRegionGetResponse(response HtcRegionsRegionGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCRegionAdminSettings:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcRegionsRegionGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcRegionsRegionGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcStorageGetResponse(response HtcStorageGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcStorageGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcStorageGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcStorageGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcStorageRegionRegionGetResponse(response HtcStorageRegionRegionGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RegionStorageOption:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcStorageRegionRegionGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcStorageRegionRegionGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcWorkspacesWorkspaceIdDimensionsGetResponse(response HtcWorkspacesWorkspaceIdDimensionsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HtcWorkspacesWorkspaceIdDimensionsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcWorkspacesWorkspaceIdDimensionsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcWorkspacesWorkspaceIdDimensionsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcWorkspacesWorkspaceIdLimitsGetResponse(response HtcWorkspacesWorkspaceIdLimitsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *HTCWorkspaceLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcWorkspacesWorkspaceIdLimitsGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcWorkspacesWorkspaceIdLimitsGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcWorkspacesWorkspaceIdTaskRetentionPolicyGetResponse(response HtcWorkspacesWorkspaceIdTaskRetentionPolicyGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WorkspaceTaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcWorkspacesWorkspaceIdTaskRetentionPolicyGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcWorkspacesWorkspaceIdTaskRetentionPolicyGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcWorkspacesWorkspaceIdTaskRetentionPolicyPutResponse(response HtcWorkspacesWorkspaceIdTaskRetentionPolicyPutRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *WorkspaceTaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcWorkspacesWorkspaceIdTaskRetentionPolicyPutUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *HtcWorkspacesWorkspaceIdTaskRetentionPolicyPutForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeOAuth2TokenPostResponse(response OAuth2TokenPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OAuth2Token:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeWellKnownJwksJSONGetResponse(response WellKnownJwksJSONGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *JsonWebKeySet:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
