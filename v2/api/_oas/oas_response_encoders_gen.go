// Code generated by ogen, DO NOT EDIT.

package _oas

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func encodeAuthTokenWhoamiGetResponse(response AuthTokenWhoamiGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCTokenPayload:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *AuthTokenWhoamiGetForbidden:
		w.WriteHeader(403)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCancelJobsResponse(response CancelJobsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CancelJobsOK:
		w.WriteHeader(200)

		return nil

	case *CancelJobsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *CancelJobsForbidden:
		w.WriteHeader(403)

		return nil

	case *CancelJobsNotFound:
		w.WriteHeader(404)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateProjectResponse(response CreateProjectRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateProjectUnauthorized:
		w.WriteHeader(401)

		return nil

	case *CreateProjectForbidden:
		w.WriteHeader(403)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateRepoResponse(response CreateRepoRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCRepository:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateRepoUnauthorized:
		w.WriteHeader(401)

		return nil

	case *CreateRepoForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateTaskResponse(response CreateTaskRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateTaskUnauthorized:
		w.WriteHeader(401)

		return nil

	case *CreateTaskForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetDimensionsResponse(response GetDimensionsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectDimensions:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetDimensionsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetDimensionsForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetEventsResponse(response GetEventsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCJobStatusEvents:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetEventsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetEventsForbidden:
		w.WriteHeader(403)

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetGCPClustersResponse(response GetGCPClustersRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCClusterStatusResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetGCPClustersUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetGCPClustersForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetImageResponse(response GetImageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCImageStatus:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetImageUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetImageForbidden:
		w.WriteHeader(403)

		return nil

	case *GetImageNotFound:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetImagesResponse(response GetImagesRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCImages:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetImagesUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetImagesForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetJobResponse(response GetJobRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCJob:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetJobUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetJobForbidden:
		w.WriteHeader(403)

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetJobsResponse(response GetJobsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCJobs:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetJobsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetJobsForbidden:
		w.WriteHeader(403)

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetLogsResponse(response GetLogsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCJobLogs:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetLogsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetLogsForbidden:
		w.WriteHeader(403)

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMetricsResponse(response GetMetricsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetMetricsOK:
		w.Header().Set("Content-Type", "text/plain; charset=utf-8")
		w.WriteHeader(200)

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMetricsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetMetricsForbidden:
		w.WriteHeader(403)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetProjectResponse(response GetProjectRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetProjectUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetProjectForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetProjectLimitsResponse(response GetProjectLimitsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectLimits:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetProjectLimitsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetProjectLimitsForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetProjectsResponse(response GetProjectsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectsResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetProjectsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetProjectsForbidden:
		w.WriteHeader(403)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetRegistryTokenResponse(response GetRegistryTokenRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetRegistryTokenOKHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
		}
		w.WriteHeader(200)

		writer := w
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetRegistryTokenUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetRegistryTokenForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTaskRetentionPolicyResponse(response GetTaskRetentionPolicyRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *WorkspaceTaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetTaskRetentionPolicyUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetTaskRetentionPolicyForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTaskStatsResponse(response GetTaskStatsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *JobStatusSummary:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetTaskStatsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetTaskStatsForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTasksResponse(response GetTasksRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCTasksResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetTasksUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetTasksForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTokenResponse(response GetTokenRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetWorkspaceLimitsResponse(response GetWorkspaceLimitsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCWorkspaceLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetWorkspaceLimitsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *GetWorkspaceLimitsForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdDimensionsPutResponse(response HtcProjectsProjectIdDimensionsPutRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdDimensionsPutCreatedApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdDimensionsPutUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdDimensionsPutForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsDeleteResponse(response HtcProjectsProjectIdLimitsDeleteRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdLimitsDeleteNoContent:
		w.WriteHeader(204)

		return nil

	case *HtcProjectsProjectIdLimitsDeleteUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdLimitsDeleteForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDDeleteResponse(response HtcProjectsProjectIdLimitsIDDeleteRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdLimitsIDDeleteNoContent:
		w.WriteHeader(204)

		return nil

	case *HtcProjectsProjectIdLimitsIDDeleteUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdLimitsIDDeleteForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDGetResponse(response HtcProjectsProjectIdLimitsIDGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsIDGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdLimitsIDGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsIDPatchResponse(response HtcProjectsProjectIdLimitsIDPatchRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsIDPatchUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdLimitsIDPatchForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdLimitsPostResponse(response HtcProjectsProjectIdLimitsPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProjectLimit:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdLimitsPostUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdLimitsPostForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdPatchResponse(response HtcProjectsProjectIdPatchRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCProject:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdPatchUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdPatchForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStoragePresignedURLGetResponse(response HtcProjectsProjectIdStoragePresignedURLGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PresignedPutUrlResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStoragePresignedURLGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdStoragePresignedURLGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokenGetResponse(response HtcProjectsProjectIdStorageTokenGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokenGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdStorageTokenGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokenRegionGetResponse(response HtcProjectsProjectIdStorageTokenRegionGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokenRegionGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdStorageTokenRegionGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdStorageTokensGetResponse(response HtcProjectsProjectIdStorageTokensGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessTokens:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdStorageTokensGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdStorageTokensGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyDeleteResponse(response HtcProjectsProjectIdTaskRetentionPolicyDeleteRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteNoContent:
		w.WriteHeader(204)

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyDeleteForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyGetResponse(response HtcProjectsProjectIdTaskRetentionPolicyGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTaskRetentionPolicyPutResponse(response HtcProjectsProjectIdTaskRetentionPolicyPutRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyPutUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTaskRetentionPolicyPutForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdDeleteResponse(response HtcProjectsProjectIdTasksTaskIdDeleteRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdDeleteOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdDeleteUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdDeleteForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGetResponse(response HtcProjectsProjectIdTasksTaskIdGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetResponse(response HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdGroupsGetResponse(response HtcProjectsProjectIdTasksTaskIdGroupsGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcProjectsProjectIdTasksTaskIdGroupsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupsGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdGroupsGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdPatchResponse(response HtcProjectsProjectIdTasksTaskIdPatchRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCTask:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdPatchUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdPatchForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetResponse(response HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PresignedPutUrlResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *RegionalStorageResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokenGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokenGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessToken:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcProjectsProjectIdTasksTaskIdStorageTokensGetResponse(response HtcProjectsProjectIdTasksTaskIdStorageTokensGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StorageAccessTokens:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokensGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcProjectsProjectIdTasksTaskIdStorageTokensGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcRegionsGetResponse(response HtcRegionsGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCInfraResource:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcRegionsGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcRegionsGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcRegionsRegionGetResponse(response HtcRegionsRegionGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCRegionAdminSettings:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcRegionsRegionGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcRegionsRegionGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcStorageGetResponse(response HtcStorageGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcStorageGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcStorageGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcStorageGetForbidden:
		w.WriteHeader(403)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcStorageRegionRegionGetResponse(response HtcStorageRegionRegionGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *RegionStorageOption:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcStorageRegionRegionGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcStorageRegionRegionGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeHtcWorkspacesWorkspaceIdDimensionsGetResponse(response HtcWorkspacesWorkspaceIdDimensionsGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HtcWorkspacesWorkspaceIdDimensionsGetOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HtcWorkspacesWorkspaceIdDimensionsGetUnauthorized:
		w.WriteHeader(401)

		return nil

	case *HtcWorkspacesWorkspaceIdDimensionsGetForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeOAuth2TokenPostResponse(response OAuth2TokenPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OAuth2Token:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodePutTaskRetentionPolicyResponse(response PutTaskRetentionPolicyRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *WorkspaceTaskRetentionPolicy:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(201)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *PutTaskRetentionPolicyUnauthorized:
		w.WriteHeader(401)

		return nil

	case *PutTaskRetentionPolicyForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *PutTaskRetentionPolicyMethodNotAllowed:
		w.WriteHeader(405)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSubmitJobsResponse(response SubmitJobsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *HTCJobSubmitRequests:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *HTCRequestError:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *SubmitJobsUnauthorized:
		w.WriteHeader(401)

		return nil

	case *SubmitJobsForbidden:
		w.WriteHeader(403)

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(404)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeWellKnownJwksJSONGetResponse(response WellKnownJwksJSONGetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *JsonWebKeySet:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeWhoAmIResponse(response WhoAmIRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *WhoAmI:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *OAuth2ErrorResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(401)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
