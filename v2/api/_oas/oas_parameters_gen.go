// Code generated by ogen, DO NOT EDIT.

package _oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CancelJobsParams is parameters of cancelJobs operation.
type CancelJobsParams struct {
	ProjectId string
	TaskId    string
	Group     OptString
}

func unpackCancelJobsParams(packed middleware.Parameters) (params CancelJobsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.(OptString)
		}
	}
	return params
}

func decodeCancelJobsParams(args [2]string, argsEscaped bool, r *http.Request) (params CancelJobsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Group.SetTo(paramsDotGroupVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateProjectLimitParams is parameters of createProjectLimit operation.
type CreateProjectLimitParams struct {
	ProjectId string
}

func unpackCreateProjectLimitParams(packed middleware.Parameters) (params CreateProjectLimitParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeCreateProjectLimitParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateProjectLimitParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateRepoParams is parameters of createRepo operation.
type CreateRepoParams struct {
	ProjectId string
	// Must match the regex '(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*'.
	RepoName string
}

func unpackCreateRepoParams(packed middleware.Parameters) (params CreateRepoParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "repoName",
			In:   "path",
		}
		params.RepoName = packed[key].(string)
	}
	return params
}

func decodeCreateRepoParams(args [2]string, argsEscaped bool, r *http.Request) (params CreateRepoParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: repoName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repoName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RepoName = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*"],
				}).Validate(string(params.RepoName)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "repoName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateTaskParams is parameters of createTask operation.
type CreateTaskParams struct {
	ProjectId string
}

func unpackCreateTaskParams(packed middleware.Parameters) (params CreateTaskParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeCreateTaskParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateTaskParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetEventsParams is parameters of getEvents operation.
type GetEventsParams struct {
	JobId     string
	ProjectId string
	TaskId    string
	PageIndex OptString
	PageSize  OptInt32
}

func unpackGetEventsParams(packed middleware.Parameters) (params GetEventsParams) {
	{
		key := middleware.ParameterKey{
			Name: "jobId",
			In:   "path",
		}
		params.JobId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetEventsParams(args [3]string, argsEscaped bool, r *http.Request) (params GetEventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: jobId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "jobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jobId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetGCPClustersParams is parameters of getGCPClusters operation.
type GetGCPClustersParams struct {
	WorkspaceId string
}

func unpackGetGCPClustersParams(packed middleware.Parameters) (params GetGCPClustersParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(string)
	}
	return params
}

func decodeGetGCPClustersParams(args [1]string, argsEscaped bool, r *http.Request) (params GetGCPClustersParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetImageParams is parameters of getImage operation.
type GetImageParams struct {
	ImageName string
	ProjectId string
}

func unpackGetImageParams(packed middleware.Parameters) (params GetImageParams) {
	{
		key := middleware.ParameterKey{
			Name: "imageName",
			In:   "path",
		}
		params.ImageName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetImageParams(args [2]string, argsEscaped bool, r *http.Request) (params GetImageParams, _ error) {
	// Decode path: imageName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "imageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ImageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "imageName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetImagesParams is parameters of getImages operation.
type GetImagesParams struct {
	ProjectId string
}

func unpackGetImagesParams(packed middleware.Parameters) (params GetImagesParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetImagesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetImagesParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetJobParams is parameters of getJob operation.
type GetJobParams struct {
	JobId     string
	ProjectId string
	TaskId    string
}

func unpackGetJobParams(packed middleware.Parameters) (params GetJobParams) {
	{
		key := middleware.ParameterKey{
			Name: "jobId",
			In:   "path",
		}
		params.JobId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeGetJobParams(args [3]string, argsEscaped bool, r *http.Request) (params GetJobParams, _ error) {
	// Decode path: jobId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "jobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jobId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetJobsParams is parameters of getJobs operation.
type GetJobsParams struct {
	ProjectId string
	TaskId    string
	Group     OptString
	JobId     []string
	PageIndex OptString
	PageSize  OptInt32
	Status    OptRescaleJobStatus
	ViewType  OptViewType
}

func unpackGetJobsParams(packed middleware.Parameters) (params GetJobsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "jobId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.JobId = v.([]string)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptRescaleJobStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "viewType",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ViewType = v.(OptViewType)
		}
	}
	return params
}

func decodeGetJobsParams(args [2]string, argsEscaped bool, r *http.Request) (params GetJobsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Group.SetTo(paramsDotGroupVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: jobId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "jobId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotJobIdVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotJobIdVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.JobId = append(params.JobId, paramsDotJobIdVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jobId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal RescaleJobStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = RescaleJobStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: viewType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "viewType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotViewTypeVal ViewType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotViewTypeVal = ViewType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ViewType.SetTo(paramsDotViewTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ViewType.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "viewType",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetLogsParams is parameters of getLogs operation.
type GetLogsParams struct {
	JobId     string
	ProjectId string
	TaskId    string
	PageIndex OptString
	// Maximum value: 10000.
	PageSize OptInt32
	// Sort order.
	Sort OptGetLogsSort
}

func unpackGetLogsParams(packed middleware.Parameters) (params GetLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "jobId",
			In:   "path",
		}
		params.JobId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Sort = v.(OptGetLogsSort)
		}
	}
	return params
}

func decodeGetLogsParams(args [3]string, argsEscaped bool, r *http.Request) (params GetLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: jobId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "jobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "jobId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: sort.
	{
		val := GetLogsSort("desc")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal GetLogsSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = GetLogsSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Sort.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetMetricsParams is parameters of getMetrics operation.
type GetMetricsParams struct {
	AcceptEncoding []string
}

func unpackGetMetricsParams(packed middleware.Parameters) (params GetMetricsParams) {
	{
		key := middleware.ParameterKey{
			Name: "Accept-Encoding",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.AcceptEncoding = v.([]string)
		}
	}
	return params
}

func decodeGetMetricsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMetricsParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Accept-Encoding.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Accept-Encoding",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotAcceptEncodingVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAcceptEncodingVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.AcceptEncoding = append(params.AcceptEncoding, paramsDotAcceptEncodingVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.AcceptEncoding)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.AcceptEncoding); err != nil {
					return errors.Wrap(err, "array")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Accept-Encoding",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectParams is parameters of getProject operation.
type GetProjectParams struct {
	ProjectId string
}

func unpackGetProjectParams(packed middleware.Parameters) (params GetProjectParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetProjectParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectDimensionsParams is parameters of getProjectDimensions operation.
type GetProjectDimensionsParams struct {
	ProjectId string
}

func unpackGetProjectDimensionsParams(packed middleware.Parameters) (params GetProjectDimensionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetProjectDimensionsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectDimensionsParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectLimitsParams is parameters of getProjectLimits operation.
type GetProjectLimitsParams struct {
	ProjectId string
}

func unpackGetProjectLimitsParams(packed middleware.Parameters) (params GetProjectLimitsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetProjectLimitsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectLimitsParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectTaskRetentionPolicyParams is parameters of getProjectTaskRetentionPolicy operation.
type GetProjectTaskRetentionPolicyParams struct {
	ProjectId string
}

func unpackGetProjectTaskRetentionPolicyParams(packed middleware.Parameters) (params GetProjectTaskRetentionPolicyParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetProjectTaskRetentionPolicyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProjectTaskRetentionPolicyParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProjectsParams is parameters of getProjects operation.
type GetProjectsParams struct {
	OnlyMyProjects OptBool
	PageIndex      OptString
	PageSize       OptInt32
}

func unpackGetProjectsParams(packed middleware.Parameters) (params GetProjectsParams) {
	{
		key := middleware.ParameterKey{
			Name: "onlyMyProjects",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OnlyMyProjects = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetProjectsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetProjectsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: onlyMyProjects.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "onlyMyProjects",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOnlyMyProjectsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotOnlyMyProjectsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OnlyMyProjects.SetTo(paramsDotOnlyMyProjectsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "onlyMyProjects",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetRegistryTokenParams is parameters of getRegistryToken operation.
type GetRegistryTokenParams struct {
	ProjectId string
}

func unpackGetRegistryTokenParams(packed middleware.Parameters) (params GetRegistryTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeGetRegistryTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params GetRegistryTokenParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTaskStatsParams is parameters of GetTaskStats operation.
type GetTaskStatsParams struct {
	ProjectId string
	TaskId    string
}

func unpackGetTaskStatsParams(packed middleware.Parameters) (params GetTaskStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeGetTaskStatsParams(args [2]string, argsEscaped bool, r *http.Request) (params GetTaskStatsParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTasksParams is parameters of getTasks operation.
type GetTasksParams struct {
	ProjectId string
	PageIndex OptString
	PageSize  OptInt32
}

func unpackGetTasksParams(packed middleware.Parameters) (params GetTasksParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetTasksParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTasksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTokenParams is parameters of getToken operation.
type GetTokenParams struct {
	XRescaleEnvironment OptString
}

func unpackGetTokenParams(packed middleware.Parameters) (params GetTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Rescale-Environment",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XRescaleEnvironment = v.(OptString)
		}
	}
	return params
}

func decodeGetTokenParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTokenParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Set default value for header: X-Rescale-Environment.
	{
		val := string("prod")
		params.XRescaleEnvironment.SetTo(val)
	}
	// Decode header: X-Rescale-Environment.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Rescale-Environment",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXRescaleEnvironmentVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotXRescaleEnvironmentVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XRescaleEnvironment.SetTo(paramsDotXRescaleEnvironmentVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Rescale-Environment",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GetWorkspaceDimensionsParams is parameters of getWorkspaceDimensions operation.
type GetWorkspaceDimensionsParams struct {
	WorkspaceId string
}

func unpackGetWorkspaceDimensionsParams(packed middleware.Parameters) (params GetWorkspaceDimensionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(string)
	}
	return params
}

func decodeGetWorkspaceDimensionsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWorkspaceDimensionsParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetWorkspaceLimitsParams is parameters of getWorkspaceLimits operation.
type GetWorkspaceLimitsParams struct {
	WorkspaceId string
}

func unpackGetWorkspaceLimitsParams(packed middleware.Parameters) (params GetWorkspaceLimitsParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(string)
	}
	return params
}

func decodeGetWorkspaceLimitsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWorkspaceLimitsParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetWorkspaceTaskRetentionPolicyParams is parameters of getWorkspaceTaskRetentionPolicy operation.
type GetWorkspaceTaskRetentionPolicyParams struct {
	WorkspaceId string
}

func unpackGetWorkspaceTaskRetentionPolicyParams(packed middleware.Parameters) (params GetWorkspaceTaskRetentionPolicyParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(string)
	}
	return params
}

func decodeGetWorkspaceTaskRetentionPolicyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWorkspaceTaskRetentionPolicyParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdDimensionsPutParams is parameters of PUT /htc/projects/{projectId}/dimensions operation.
type HtcProjectsProjectIdDimensionsPutParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdDimensionsPutParams(packed middleware.Parameters) (params HtcProjectsProjectIdDimensionsPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdDimensionsPutParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdDimensionsPutParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdLimitsDeleteParams is parameters of DELETE /htc/projects/{projectId}/limits operation.
type HtcProjectsProjectIdLimitsDeleteParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdLimitsDeleteParams(packed middleware.Parameters) (params HtcProjectsProjectIdLimitsDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdLimitsDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdLimitsDeleteParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdLimitsIDDeleteParams is parameters of DELETE /htc/projects/{projectId}/limits/{id} operation.
type HtcProjectsProjectIdLimitsIDDeleteParams struct {
	ID        int32
	ProjectId string
}

func unpackHtcProjectsProjectIdLimitsIDDeleteParams(packed middleware.Parameters) (params HtcProjectsProjectIdLimitsIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdLimitsIDDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdLimitsIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdLimitsIDGetParams is parameters of GET /htc/projects/{projectId}/limits/{id} operation.
type HtcProjectsProjectIdLimitsIDGetParams struct {
	ID        int32
	ProjectId string
}

func unpackHtcProjectsProjectIdLimitsIDGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdLimitsIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdLimitsIDGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdLimitsIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdLimitsIDPatchParams is parameters of PATCH /htc/projects/{projectId}/limits/{id} operation.
type HtcProjectsProjectIdLimitsIDPatchParams struct {
	ID        int32
	ProjectId string
}

func unpackHtcProjectsProjectIdLimitsIDPatchParams(packed middleware.Parameters) (params HtcProjectsProjectIdLimitsIDPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdLimitsIDPatchParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdLimitsIDPatchParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdPatchParams is parameters of PATCH /htc/projects/{projectId} operation.
type HtcProjectsProjectIdPatchParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdPatchParams(packed middleware.Parameters) (params HtcProjectsProjectIdPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdPatchParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdStoragePresignedURLGetParams is parameters of GET /htc/projects/{projectId}/storage/presigned-url operation.
type HtcProjectsProjectIdStoragePresignedURLGetParams struct {
	ProjectId string
	FilePath  string
}

func unpackHtcProjectsProjectIdStoragePresignedURLGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdStoragePresignedURLGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "filePath",
			In:   "query",
		}
		params.FilePath = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdStoragePresignedURLGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdStoragePresignedURLGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: filePath.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filePath",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FilePath = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.FilePath)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filePath",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdStorageTokenGetParams is parameters of GET /htc/projects/{projectId}/storage/token operation.
type HtcProjectsProjectIdStorageTokenGetParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdStorageTokenGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdStorageTokenGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdStorageTokenGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdStorageTokenGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdStorageTokenRegionGetParams is parameters of GET /htc/projects/{projectId}/storage/token/{region} operation.
type HtcProjectsProjectIdStorageTokenRegionGetParams struct {
	ProjectId string
	Region    SupportedRescaleRegion
}

func unpackHtcProjectsProjectIdStorageTokenRegionGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdStorageTokenRegionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "region",
			In:   "path",
		}
		params.Region = packed[key].(SupportedRescaleRegion)
	}
	return params
}

func decodeHtcProjectsProjectIdStorageTokenRegionGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdStorageTokenRegionGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: region.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "region",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Region = SupportedRescaleRegion(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Region.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "region",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdStorageTokensGetParams is parameters of GET /htc/projects/{projectId}/storage/tokens operation.
type HtcProjectsProjectIdStorageTokensGetParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdStorageTokensGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdStorageTokensGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdStorageTokensGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdStorageTokensGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTaskRetentionPolicyDeleteParams is parameters of DELETE /htc/projects/{projectId}/task-retention-policy operation.
type HtcProjectsProjectIdTaskRetentionPolicyDeleteParams struct {
	ProjectId string
}

func unpackHtcProjectsProjectIdTaskRetentionPolicyDeleteParams(packed middleware.Parameters) (params HtcProjectsProjectIdTaskRetentionPolicyDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTaskRetentionPolicyDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTaskRetentionPolicyDeleteParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdDeleteParams is parameters of DELETE /htc/projects/{projectId}/tasks/{taskId} operation.
type HtcProjectsProjectIdTasksTaskIdDeleteParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdDeleteParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdDeleteParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId} operation.
type HtcProjectsProjectIdTasksTaskIdGetParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/group-summary-statistics operation.
type HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams struct {
	ProjectId string
	TaskId    string
	Group     []string
	PageIndex OptString
	PageSize  OptInt32
}

func unpackHtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.([]string)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdGroupSummaryStatisticsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotGroupVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotGroupVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Group = append(params.Group, paramsDotGroupVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdGroupsGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/groups operation.
type HtcProjectsProjectIdTasksTaskIdGroupsGetParams struct {
	ProjectId string
	TaskId    string
	PageIndex OptString
	PageSize  OptInt32
}

func unpackHtcProjectsProjectIdTasksTaskIdGroupsGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdGroupsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageIndex = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdGroupsGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdGroupsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: pageIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageIndex.SetTo(paramsDotPageIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(100)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdPatchParams is parameters of PATCH /htc/projects/{projectId}/tasks/{taskId} operation.
type HtcProjectsProjectIdTasksTaskIdPatchParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdPatchParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdPatchParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdPatchParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/storage/presigned-url operation.
type HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams struct {
	ProjectId string
	TaskId    string
	FilePath  string
}

func unpackHtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "filePath",
			In:   "query",
		}
		params.FilePath = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdStoragePresignedURLGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: filePath.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filePath",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FilePath = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.FilePath)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filePath",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/storage/regional-storage operation.
type HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdStorageRegionalStorageGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdStorageTokenGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/storage/token operation.
type HtcProjectsProjectIdTasksTaskIdStorageTokenGetParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdStorageTokenGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdStorageTokenGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdStorageTokenGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdStorageTokenGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/storage/token/{region} operation.
type HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams struct {
	ProjectId string
	Region    SupportedRescaleRegion
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "region",
			In:   "path",
		}
		params.Region = packed[key].(SupportedRescaleRegion)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams(args [3]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdStorageTokenRegionGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: region.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "region",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Region = SupportedRescaleRegion(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Region.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "region",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcProjectsProjectIdTasksTaskIdStorageTokensGetParams is parameters of GET /htc/projects/{projectId}/tasks/{taskId}/storage/tokens operation.
type HtcProjectsProjectIdTasksTaskIdStorageTokensGetParams struct {
	ProjectId string
	TaskId    string
}

func unpackHtcProjectsProjectIdTasksTaskIdStorageTokensGetParams(packed middleware.Parameters) (params HtcProjectsProjectIdTasksTaskIdStorageTokensGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeHtcProjectsProjectIdTasksTaskIdStorageTokensGetParams(args [2]string, argsEscaped bool, r *http.Request) (params HtcProjectsProjectIdTasksTaskIdStorageTokensGetParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcRegionsGetParams is parameters of GET /htc/regions operation.
type HtcRegionsGetParams struct {
	CloudProvider OptCloudProvider
	Enabled       OptBool
}

func unpackHtcRegionsGetParams(packed middleware.Parameters) (params HtcRegionsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "cloudProvider",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CloudProvider = v.(OptCloudProvider)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "enabled",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Enabled = v.(OptBool)
		}
	}
	return params
}

func decodeHtcRegionsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params HtcRegionsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: cloudProvider.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cloudProvider",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCloudProviderVal CloudProvider
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCloudProviderVal = CloudProvider(c)
					return nil
				}(); err != nil {
					return err
				}
				params.CloudProvider.SetTo(paramsDotCloudProviderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CloudProvider.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cloudProvider",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: enabled.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "enabled",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnabledVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotEnabledVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Enabled.SetTo(paramsDotEnabledVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "enabled",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HtcRegionsRegionGetParams is parameters of GET /htc/regions/{region} operation.
type HtcRegionsRegionGetParams struct {
	Region SupportedRescaleRegion
}

func unpackHtcRegionsRegionGetParams(packed middleware.Parameters) (params HtcRegionsRegionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "region",
			In:   "path",
		}
		params.Region = packed[key].(SupportedRescaleRegion)
	}
	return params
}

func decodeHtcRegionsRegionGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcRegionsRegionGetParams, _ error) {
	// Decode path: region.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "region",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Region = SupportedRescaleRegion(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Region.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "region",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HtcStorageRegionRegionGetParams is parameters of GET /htc/storage/region/{region} operation.
type HtcStorageRegionRegionGetParams struct {
	Region SupportedRescaleRegion
}

func unpackHtcStorageRegionRegionGetParams(packed middleware.Parameters) (params HtcStorageRegionRegionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "region",
			In:   "path",
		}
		params.Region = packed[key].(SupportedRescaleRegion)
	}
	return params
}

func decodeHtcStorageRegionRegionGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HtcStorageRegionRegionGetParams, _ error) {
	// Decode path: region.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "region",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Region = SupportedRescaleRegion(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Region.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "region",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutProjectTaskRetentionPolicyParams is parameters of putProjectTaskRetentionPolicy operation.
type PutProjectTaskRetentionPolicyParams struct {
	ProjectId string
}

func unpackPutProjectTaskRetentionPolicyParams(packed middleware.Parameters) (params PutProjectTaskRetentionPolicyParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	return params
}

func decodePutProjectTaskRetentionPolicyParams(args [1]string, argsEscaped bool, r *http.Request) (params PutProjectTaskRetentionPolicyParams, _ error) {
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutWorkspaceTaskRetentionPolicyParams is parameters of putWorkspaceTaskRetentionPolicy operation.
type PutWorkspaceTaskRetentionPolicyParams struct {
	WorkspaceId string
}

func unpackPutWorkspaceTaskRetentionPolicyParams(packed middleware.Parameters) (params PutWorkspaceTaskRetentionPolicyParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(string)
	}
	return params
}

func decodePutWorkspaceTaskRetentionPolicyParams(args [1]string, argsEscaped bool, r *http.Request) (params PutWorkspaceTaskRetentionPolicyParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SubmitJobsParams is parameters of submitJobs operation.
type SubmitJobsParams struct {
	ProjectId string
	TaskId    string
	Group     OptString
}

func unpackSubmitJobsParams(packed middleware.Parameters) (params SubmitJobsParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "path",
		}
		params.ProjectId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.(OptString)
		}
	}
	return params
}

func decodeSubmitJobsParams(args [2]string, argsEscaped bool, r *http.Request) (params SubmitJobsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: projectId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "projectId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: taskId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Group.SetTo(paramsDotGroupVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
